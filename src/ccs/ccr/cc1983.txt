                           The Decus C Language System
                    Second Decus Release (second submission)


                                       By


                                David G.  Conroy
                                  Martin Minow
                                Robert B.  Denny
                                 Charles Forsyth



                                  Submitted by:

                                  Martin Minow

                          Digital Equipment Corporation
                            146 Main Street MLO3-3/U8
                          Maynard, Mass.  01754, U.S.A.


                           November 11, 1983, 11:11 AM




        This document describes the changes and additions to the Decus C
        system since the first submission of Decus C in  November  1980.
        There are a few places in which the current compiler and library
        are incompatible with the previous release, which  will  require
        conversion of user programs.  


        1.0  DISTRIBUTION 

        The  original  distribution  contained a very large number of --
        mostly -- small files.  The new distribution uses a text archive
        program  to  combine infrequently-used components into a smaller
        number of larger files.  

        The  format of the archive "container" file was carefully chosen
        to be suitable for distribution:  there are no record counts  or
        embedded  binary data.  While this makes the archiver unsuitable
        for more general usage, it is possible for the user to unpack or
        edit  the  archive  with any text editor.  The archive container
        file format will be described in a subsequent section.  

        Command  files  for  C  programs are now generated by a program,
        BUILD, that understands conventions for  the  various  operating
        systems supported by Decus C.  




        2.0  COMPILER 

        There have been many changes and improvements to the compiler:  

              o  In-line  EIS  (multiply  and  divide)  instructions are
                 supported.  

              o  All floating-point operations are supported.  While the
                 compiler   generates   code   for    systems    lacking
                 floating-point (FPU) hardware, the library routines are
                 non-existant.  

              o  A  psect directive is supported allowing the programmer
                 (almost) full control over program  sections  that  are
                 generated.   Note  that  this  is  not transportable to
                 other operating systems or C compilers.  

              o  The   compiler   syntax   checking  is  more  rigorous,
                 requiring changes to programs that were  written  using
                 out   of  date  C  compilers.   For  example,  previous
                 versions of C allowed a pointer variable  to  point  to
                 any structure member.  Now, the variable may only point
                 to members in the structure to which  it  points.   For
                 example:  

                        struct A {
                                int     a1, a2;
                        };

                        struct B {
                                int     b1, b2;
                        };

                        main() {
                                struct A *ap;

                                ap->b1 ...              /* Error
                        */
                                ((struct B *)ap)->b1    /* Works
                        */


              o  A  warning  message  is  printed for unreferenced local
                 variables.  These may be caused by typographical errors
                 or  by  removing code that uses local variables without
                 removing the variable  definitions.   The  "-w"  option
                 turns off this error message.  

              o  Previous  versions  of  the compiler generated ".globl"
                 definitions for all "extern" variables.   This  version
                 generates  .globl's  only  if the variable was actually
                 used.  This is needed if the  programmer  #include's  a
                 function  definition  header  file  and wishes to build
                 some routines into an overlay segment.  




              o  The   #if   (expression)   pre-processor  directive  is
                 supported,  however  the  #assert  directive   is   not
                 supported.  



        3.0  STANDARD LIBRARY 

        The  library  has been extensively expanded, including a display
        terminal handler package modelled closely on routines in the Vms
        runtime  library.   A  few  incompatible  changes have been made
        which make Decus  C  more  compatible  with  the  Unix  and  Vms
        libraries:  

              o  The "iovtoa" routine has been renamed "fgetname" and is
                 compatible with the routine of the  same  name  in  the
                 Vax-11 C runtime library.  

              o  The  rand  routine is compatible with the Unix routine.
                 Irand is compatible with the previous Decus C release: 
                        int irand(v)    returns 0 .. v-1
                        long rand()     returns 0 .. (2<<32)-1

              o  The time routines have been redone.  time() now returns
                 the Unix time of  day  (seconds  since  Jan  1,  1970).
                 tod()  is  a  new  routine that returns the time of day
                 (since midnite today) that  was  returned  by  previous
                 versions of time().  

                 The  ctime()  routine is now compatible with Unix usage
                 -- it takes a time value as returned by  time()  rather
                 than as returned by $$rtim().  

                 The  rtime()  routine  is  now  called $$rtim.  The old
                 ctime() routine is now called $$ctim().  A new routine,
                 $$utim() converts $$rtim values to time() format.  



        4.0  OTHER LIBRARIES 

        There  are  several  "native"  libraries  contributed by various
        people, including a native RSTS/E I/O library and a  library  of
        general utility functions.  

        There  is  also  an  interface library to aid in running Decus C
        programs under VMS.  It presupposes access to Vax-11C.  


        5.0  USAGE 

        On  RSTS,  the  MCR command is now used by the operating system.
        Consequently, MCR has now been renamed CRUN.  




        6.0  TOOLS 

        Various  new  tools  including  a  text  archiver  (ARCH, ARCHC,
        ARCHX), a command file  builder  (BUILD),  and  a  file  typeout
        program (T).  

        All   tools   compile   correctly   using  Vax-11C.   Most  work
        compatibly, while some have added functionality.  A few  are  so
        system specific that, while they might compile on Vax-11 C, they
        probably don't do anything useful.  


        7.0  OTHER STUFF 

        Due to space considerations, the large cookie file (now grown to
        over 11,000 entries) is no  longer  distributed  with  Decus  C.
        Instead,  there  is a text justifier (ROFF) based on the program
        described in Software Tools and several other programs, such  as
        a units conversion routine.  

        Note  that  many  programs  that  have  not  been  used  (by the
        developers)  have  not  been  tested  and  probably  won't  work
        correctly.  


        8.0  DOCUMENTATION 

        The  getrno  program  has  been  enhanced  to  allow  C  program
        documentation to be embedded in source code.  Unlike the  format
        used  by the run-time library, it is possible for the programmer
        to include runoff  commands  in  the  tool  documentation.   The
        (general) format of tool source is as follows:  

                /*
                 * documentation starts here:
                 */
                #ifdef  DOCUMENTATION
                title   tool_name       one_line_description
                index   tool_name       one_line_keyword_description
                subhead
                        Justified text for this sub-head...
                        .x -- runoff commands ...
                anothersubhead
                        ...
                #endif
                /*
                 * Documentation ends
                 */

        Note that this means that it is unwise to 

                #define DOCUMENTATION 





        9.0  ARCHIVE TAPE FORMAT 

        Files  are  combined into a "container" file using the following
        format:  

                -h-     file_name       date_entered
                Text of the file
                -h-     next_file       date_entered
                ...

        Within  a  file,  a  line  beginning  with '-' will be quoted by
        doubling the '-':  

                -h-     file_name       date_entered
                Text...
                --More text
                ...

        This allows embedded archives to be supported.  To extract files
        from an archive without  access  to  ARCH  or  ARCHX,  use  your
        favorite editor to search for the '-h-' header and for the '-h-'
        of the next file (or the end of all files).   Then  convert  all
        instances of "--" at the beginning of a line to "-".  


        10.0  HISTORY AND FUTURE 

        Decus C was first distributed to the "wider world" on an RSX-11M
        SIG tape in 1978.  It was  first  distributed  to  Decus  --  as
        11-SP-18 -- in November 1980.  This second release was submitted
        in July 1983 and resubmitted in November 1983 when we discovered
        that two accounts were accidently omitted.  

        Those of us who have been working with the compiler and run-time
        library for the past five  years  are  quite  aware  of  several
        design   errors   and   limitations.   Some  of  them  have,  on
        retrospect, turned out  to  be  advantages.   For  example,  the
        compiler  was written in Macro -- no C compiler was available to
        the original author.  This has served as a  barrier,  preventing
        inexperienced  programmers  from  "fixing"  and  "extending" the
        compiler to suit their own tastes and prejudices.  

        For   its   implementors,  Decus  C  has  been  an  interesting,
        challenging, and enjoyable hobby.  But we are anxious to get  on
        with  other  things  and -- noting that good quality C compilers
        are now readily available on Dec machines -- we  would  like  to
        point  out  to the Decus C community that we do not plan further
        development of the compiler or run-time library.   The  date  of
        this  note  was  an  accident:   the  time  of  day  was  chosen
        intentionally.  

        When  you find a bug in the compiler or run-time library, either
        find a work-around or treat it as a opportunity  to  learn  more
        about  the  inner  workings of complicated programs.  If neither




        alternative is reasonable given your needs, you  should  not  be
        using Decus C.  
