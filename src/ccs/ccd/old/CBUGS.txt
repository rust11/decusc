This  document  contains  the current list of errors and restrictions in
the DECUS C language system.   As  errors  are  removed,  they  will  be
deleted  from  this  file.   Anything in this file should be regarded as
permanent.  The error list is in no particular order.  


** 
**  Long input lines crash the compiler 
    ____ _____ _____ _____ ___ ________
** 

If  the  source file contains a long input line, the compiler will crash
with an "abort in phase 0" message.  One source of compiler aborts is an
input  line  that  becomes  very  long  when  "#define"  statements  are
expanded.  "long" in this context means 132 bytes.  


** 
**  Bad syntax may crash the compiler 
    ___ ______ ___ _____ ___ ________
** 

The construction 

        return((c < 0) -1 :  0);  

(with  a  missing  "?")  aborts  in  phase 2 with a "missing code table"
error.  It should yield a syntax error message.  

A  similar  problem  occurs  when the programmer writes ':' when ';' was
intended:  

        printf("foo\n"):        /* Note colon   */
        printf("bar\n");

or
        c = 'U':                /* Note colon   */
        pointer--;

Gives  a  confusing "Abort in pass 2" error message ("Missing code table
entry for CLN").  The problem is that the syntax analyser does not parse
ternary  expressions ("a = (b > c) ?  d :  e") correctly;  accepting the
colon  without  a  preceeding  '?'.   The  expression  tree   which   is
subsequently built cannot be processed by the code generator.  

Since  symbols  are of finite length, there can be cases where a program
compiles correctly,  but  fails  in  the  assembler  (AS)  module.   For
example, 

        int     watchrule;
        int     watchrules;

Gives a "multiply defined symbol" error in AS, rather than in CC.  

The sequence 

        int jmp_buf foo[6];

        setjmp(jmp_buf);


                                                                          Page 2



Compiles  without  error  (it should yield a syntax error), then crashes
the AS assembler.  


** 
**  External functions must be marked extern 
    ________ _________ ____ __ ______ ______
** 

External functions must be declared as:  

        extern int func();

Writing

        int func();

may result in a syntax error message.  


** 
**  Long composite constants compile incorrectly 
    ____ _________ _________ _______ ___________
** 

The compiler incorrectly computes long constants such as "1<<16".  These
must be computed by hand and entered as exact  values.   There  are  two
problems  here.   One is that the compiler computes the above expression
in "int" precision, assigning a garbage value to the long constant.   If
you  "fix"  this,  by  writing  "1L<<16",  the  compiler will reject the
compile-time  computation  of  long  expressions,  which  is   currently
unsupported -- see next entry.  


** 
**  Long constant expressions are not optimized 
    ____ ________ ___________ ___ ___ _________
** 

If a program contains a constant expression involving longs, such as:  

        func(1L + 1L);  

the compiler does not generate 

        func(2L);  

What is more serious is that compiling:  

        long value = 1L + 1L;  

results  in  a  "bad  initializer"  error  message.   While  the  fix is
straightforward (to  routine  MODIFY:   in  CC201.MAC,  in  case  you're
interested), it is a pain in the neck to implement.  

                                                                          Page 3



** 
**  Repeated formal parameters 
    ________ ______ __________
** 

If  a  function  definition contains the same formal parameter twice, as
in:  

        func(foo, bar, foo) 

the compiler does not generate an error message.  


** 
**  Intermediate files written to user's current directory 
    ____________ _____ _______ __ ______ _______ _________
** 

Early  versions  of  RSX  CC (from the Decus SIG distribution from 1978)
wrote intermediate files and the compiler output (.s) file on  the  same
disk/directory  as the input file.  This has been changed so as to write
all output files onto the user's current directory.  This is  compatible
with RT11 CC and general PDP11 practice.  For example, assuming RSTS/E: 

             Command            Old               New
        xcc [100,100]foo   [100,100]foo.s       sy:foo.s

Note  that  RT11 CC does a "normal" CSI scan, thus allowing placement of
all files.  


** 
**  Error processing relative branches in AS 
    _____ __________ ________ ________ __ __
** 

The  AS  assembler  does  not  process  self-relative  branches (br .+4)
correctly.  They must not be used.   (Code  generated  by  CC  does  not
contain relative branches.) 


** 
**  Errors in C parser 
    ______ __ _ ______
** 


        if (...)
                do {
                        ...
                } while (...);
        else
                ...

is rejected with the message "illegal else".  Rewrite as:  

        if (...) {
                do {

                                                                          Page 4



                        ...
                } while (...);
        }
        else ...

This makes the syntax explicit for the parser (and programmer).  

The parser may incorrectly assign expression type.  For example, 

        char    c, *str;
        int     foo, mask;

        foo = mask | (c = *str++);

The  parser  thinks  that "(c = *str++)" is of type "pointer" and cannot
compute the inclusive or operation.  


** 
**  Old-style assigned binary operators 
    _________ ________ ______ _________
** 

The  C  compiler  really  and  truely  does not support the old assigned
binary operators (=+, =-, etc.).  In fact,  the  statement  "foo=-6"  is
exactly  equivalent to "foo = (-6)";  it IS NOT equivalent to "foo = foo
- 6".  The Unix compiler processed the above ambiguous case  by  "taking
the  longest matching lexical entity." If the statement was written with
embedded blanks as "foo = -6",  the  Unix  compiler  would,  in  effect,
recognize the blank space between '=' and '-'.  Note that rejecting '=-'
is, an error in Decus C.  This same problem may be  seen  in  statements
such  as  "foo=*x" which Decus C interprets as "foo = *x" while the Unix
(or  Vax-11  C)  compiler  interprets  as  "foo =* x".   The  C   syntax
definition 


** 
**  Structures must be defined globally 
    __________ ____ __ _______ ________
** 

The  C  compiler  rejects  structure  definitions  within  the body of a
function:  

        foobar() {
                struct foostr {
                        int *foo;
                } bar;
        }

However, if the structure definition is moved outside the function body,
it will compile correctly:  

        struct foostr {
                int *foo;
        };

                                                                          Page 5



        foo() {
                foostr bar;
        }

Note  that  this means that structures may not be defined one way in one
function and another way in another function.  


** 
**  Random global symbols may prevent task-building 
    ______ ______ _______ ___ _______ _____________
** 

The  RSX  file  services emulator library under RSTS/E contains a global
symbol "EOF".  Consequently, C programs running under this library  must
not  define  a  global  by this name.  The following will not task-build
correctly on RSTS/E, RSX-11 mode:  

        int eof;
        main() {
                ...
        }

Note  that  this  restriction  is  due  to  the global's presence in the
operating-system library, not the C run-time library.  

In  general,  note  that global symbols that match file services support
globals may cause conflicts with other  file  services  routines.   This
will  generally  result  in undefined global symbols when task building.
For example, functions should not begin with a leading underscore '_' to
avoid matching RSX file-control service routine names.  



** 
**  Structure definitions must be ordered 
    _________ ___________ ____ __ _______
** 

The  C  compiler  is restrictive as to the ordering of definitions.  For
example, given the following structure definition:  

        struct stack {
                int     max_index;
                int     current_index;
                int     *vector;
        };

The compiler rejects the following sequence:  

        struct stack    entry = { DATUM_MAX, 0, datum };
        int             datum[DATUM_MAX];

(as  datum  is  not  yet  defined).   However,  it accepts the following
sequence:  


                                                                          Page 6



        int             datum[DATUM_MAX];
        struct stack    entry = { DATUM_MAX, 0, datum };



** 
**  Fwild requires a sorted directory on RSX-11M 
    _____ ________ _ ______ _________ __ _______
** 

Fwild/fnext  will not properly process versions ;0 and ;-1 on native RSX
systems that support FILES-11 (ODS-1) disk  directory  structures.   The
algorithm   works   correctly  on  ODS2  structures  (and  thus  on  VMS
compatiblity mode).  The problem is that, on ODS-1, files are not sorted
in  the  directory.  A Decus program, SRD.TSK, may be used to sort ODS-1
directories as needed.  SRD is not  included  on  the  current  Decus  C
distribution because of size limitations.  

";-1" versions do not seem to work correctly.  


** 
**  Strange RSX-11M file and record formats 
    _______ _______ ____ ___ ______ _______
** 

Several  RSX-11M and VAX utility programs generate output files that are
not  correctly  processed  by  the  C   library.    For   example,   VMS
"print-image" files may encode blank lines in the record sequence field.
As currently coded, the stream I/O routines (getc(), fgets(), etc.) will
drop such lines.  

Also,  some  utility  programs  write "unformatted" files, with multiple
text lines stored in one (file-system)  logical  record.   (Task-builder
map  files and output from Runoff offer examples of this phenomenon.) In
this case, sequential file reading is no problem but, if it is necessary
to  randomly process the file using ftell() and fseek(), you should note
that  the  record-address  returned  by  ftell()  refers  only  to   the
file-system  logical record -- i.e., it will not distinguish between the
various text lines.  

The  octal-dump  program, OD.C (in the tools package), will print record
sequence numbers if they are present.  

The  file  typeout  program,  T.C  (in  the  tools package), illustrates
deblocking the various file formats and random access to  multiple  text
lines.  

Because  stdout  and  stderr  are assigned to different channels (luns),
mixing  output  to  stdout  and  stderr  may   result   in   inadvertant
overprinting  of  output  lines.   Prefacing error message output with a
newline '\n' should prevent this problem.  


                                                                          Page 7



** 
**  Library Name Changes 
    _______ ____ _______
** 

In  order  to  bring  the library more in line with other C standard I/O
libraries,  (primarily  the  VAX  native  C  compiler),  a  few  library
functions have changed names.  Sorry for the inconvenience.  

Old name        Becomes

index           strchr          Search string for character
rindex          strrch          Last instance of char in string
iovtoa          fgetname        Return file name (not on Unix)
sbreak          sbrk            Get incremental memory
fmkdl           (obsolete)      Use delete() in new programs
delete                          Delete a file, given its name
ftty            isatty          TRUE if a terminal -- see below
flun            fileno          Logical unit number -- see below

The  string  search  functions,  strchr  and  strrch are still index and
rindex on some operating systems, notably 4.2BSD.  On such systems,  you
may need to compile programs with the following command:  

        cc -Dstrchr=index -Dstrrch=rindex file.c

Logical  unit  numbers  used  in  Decus  C bear no relation to Unix file
numbers.  In particular, stdin, stdout, and stderr are not 0, 1, and  2.
In  fact,  on some operating systems, stderr equals -1.  The proper test
for "is this device a terminal" is now:  

        isatty(fileno(fd));  

The  RSX-11M  logical  unit  number  is returned by fileno(fd).  Decus C
cannot determine the RSTS/E channel number.  


** 
**  Fseek/Ftell Changes 
    ___________ _______
** 

A  long-standing  error  in  the RSX versions of fseek() and ftell() was
corrected.   Unfortunately,  this  means  that  any  data  files   using
cross-file  pointers must be rebuilt from scratch.  (An index file built
using the old version of ftell() cannot be used with  a  program  linked
with the new version of fseek().) 


** 
**  Embedded switch statement restriction 
    ________ ______ _________ ___________
** 

Multiple nested switch statements may cause the compiler to abort with a
stack overflow message.  Whether  a  given  construction  is  acceptable
depends on the overall structure of your program.  

                                                                          Page 8




The  stack  size  may  be  changed by recompiling the compiler, but this
lowers the number of symbols that can be accomodated.  


