.IIF	NDF	RSX	RSX	=	0	;Assume RT11	;01 +
.IF NE	RSX
	.title	$5toax -- Radix 50 to Ascii
.IFF
	.title	$5toar -- Radix 50 to Ascii
.ENDC								;01 -
	.ident	/x01.02/
	.enabl	lc, gbl
	.nlist	bex, cnd

;
; Convert radix 50 to ascii characters.
;
; Edit history
; 01 01-Aug-79 MM	Added RT11 support
; 02 14-Jul-80 MM	Removed divide, used algorithm from RT11

	.globl	$c5ta

.IF	NE	RSX						;01 +
	.MCALL	CALL
	.MCALL	CALLR
	.MCALL	RETURN
.IFF
.MACRO	CALL	ARG1,ARG2
.IF B	ARG2
	  JSR	PC,ARG1
.IFF
	  JSR	ARG1,ARG2
.ENDC
.ENDM	CALL

.MACRO	CALLR	ARG1
	  JMP	ARG1
.ENDM

.MACRO	RETURN	ARG1
.IF B	ARG1
	  RTS	PC
.IFF
	  RTS	ARG1
.ENDC
.ENDM	RETURN
.ENDC								;01 -


;+
; ** $c5ta -- convert radix 50 to ascii characters
;
; Inputs:
;	r0=radix 50 word
;	r1=pointer to output buffer
;
; Outputs:
;	r0 destroyed
;	r1=updated
;-

$c5ta:
	mov	r5,-(sp)	;Save
	mov	r4,-(sp)	;all
	mov	r3,-(sp)	;registers
	mov	#3,r5		;character count
10$:
	mov	#divtab,r3	;r3 -> divisor table
20$:
	tst	-(r3)		;backup throught table, at end?
	beq	10$		;if equal, yes
	mov	#-1,r4		;initialize quotient reg.
	cmp	#174777,r0	;.rad50 value too large?
	blo	40$		;yes, output "???"
30$:
	inc	r4		;divide by power of 50(octal)
	sub	(r3),r0		;
	bcc	30$		;not now
	add	(r3),r0		;restored difident
	tst	r4		;char. a blank?
	beq	50$		;br if so
	cmp	#33,r4		;char. a $ or digit?
	blo	60$		;period or digit
	beq	70$		;dollar sign
40$:
	add	#40,r4		;nope, alpha or "?"
50$:
	add	#16,r4		;
60$:
	add	#11,r4		;
70$:
	add	#11,r4		;
	movb	r4,(r1)+	;store converted char.
	dec	r5		;count 'em
	bne	20$		;more to do
	mov	(sp)+,r3	;restore
	mov	(sp)+,r4	;scratch
	mov	(sp)+,r5	;registers
	rts	pc		;and exit
;
	.word	0,1,50,3100
divtab:
	.end
